#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# Copyright (C) 2010 hemanth.hm hemanth.hm@gmail.com
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

import sys
import os
import gtk
import urllib2

import gettext
from gettext import gettext as _
gettext.textdomain('rfc-search')

# optional Launchpad integration
# this shouldn't crash if not found as it is simply used for bug reporting
try:
    import LaunchpadIntegration
    launchpad_available = True
except:
    launchpad_available = False

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'rfc_search'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

from rfc_search import (
    AboutRfcSearchDialog, PreferencesRfcSearchDialog)
from rfc_search.helpers import get_builder


class RfcSearchWindow(gtk.Window):
    __gtype_name__ = "RfcSearchWindow"

    # To construct a new instance of this method, the following notable
    # methods are called in this order:
    # __new__(cls)
    # __init__(self)
    # finish_initializing(self, builder)
    # __init__(self)
    #
    # For this reason, it's recommended you leave __init__ empty and put
    # your inialization code in finish_intializing

    def __new__(cls):
        """Special static method that's automatically called by Python when
        constructing a new instance of this class.

        Returns a fully instantiated RfcSearchWindow object.
        """
        builder = get_builder('RfcSearchWindow')
        new_object = builder.get_object("rfc_search_window")
        new_object.finish_initializing(builder)
        return new_object

    def finish_initializing(self, builder):
        """Called while initializing this instance in __new__

        finish_initalizing should be called after parsing the UI definition
        and creating a RfcSearchWindow object with it in order to finish
        initializing the start of the new RfcSearchWindow instance.

        Put your initilization code in here and leave __init__ undefined.
        """
        # Get a reference to the builder and set up the signals.
        self.builder = builder
        self.builder.connect_signals(self)

        global launchpad_available
        if launchpad_available:
            # see https://wiki.ubuntu.com/UbuntuDevelopment/Internationalisation/Coding for more information
            # about LaunchpadIntegration
            helpmenu = self.builder.get_object('helpMenu')
            if helpmenu:
                LaunchpadIntegration.set_sourcepackagename('rfc-search')
                LaunchpadIntegration.add_items(helpmenu, 0, False, True)
            else:
                launchpad_available = False

        # Uncomment the following code to read in preferences at start up.
        #dlg = PreferencesRfcSearchDialog.NewPreferencesRfcSearchDialog()
        #self.preferences = dlg.get_preferences()

        # Code for other initialization actions should be added here.


        # It can be tiresome to have to type builder.get_object
        # again and again
        get = self.builder.get_object

        self.rfc_search_window = get("rfc_search_window")
        self.rfc_search_window.find = get("find")
        self.rfc_search_window.rfc = get("rfc")
        self.rfc_search_window.result = get("result")



    def about(self, widget, data=None):
        """Display the about box for rfc-search."""
        get = self.builder.get_object
	self.rfc_search_window.rfc = get("rfc")
        self.rfc_search_window.find = get("find")
        self.rfc_search_window = get("rfc_search_window")
        about = AboutRfcSearchDialog.AboutRfcSearchDialog()
        response = about.run()
        about.destroy()

    def preferences(self, widget, data=None):
        """Display the preferences window for rfc-search."""
        prefs = PreferencesRfcSearchDialog.PreferencesRfcSearchDialog()
        response = prefs.run()
        if response == gtk.RESPONSE_OK:
            # Make any updates based on changed preferences here.
            pass
        prefs.destroy()

    def quit(self, widget, data=None):
        """Signal handler for closing the RfcSearchWindow."""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """Called when the RfcSearchWindow is closed."""
        # Clean up code for saving application state should be added here.
        gtk.main_quit()

    def on_find_clicked(self, button, data=None):
        rfc = self.rfc_search_window.rfc.get_text()
        url = 'http://www.ietf.org/rfc/rfc'+rfc+'.txt'
        try:
            response = urllib2.urlopen(url)
        except IOError,e:
          if hasattr(e, 'code'):
            if e.code != 401:
                self.rfc_search_window.result.set_text("No such RFC found!")
            else:
                html = response.read()
                self.rfc_search_window.result.set_text(str(html))

if __name__ == "__main__":
    # Support for command line options.
    import logging
    import optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option(
        "-v", "--verbose", action="store_true", dest="verbose",
        help=_("Show debug messages"))
    (options, args) = parser.parse_args()

    # Set the logging level to show debug messages.
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('logging enabled')

    # Run the application.
    window = RfcSearchWindow()
    window.show()
    gtk.main()
